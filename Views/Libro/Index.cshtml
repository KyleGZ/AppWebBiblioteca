@model PaginacionResponse<LibroListaView>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Gestión de Libros - Biblioteca Esparza";
    ViewData["PageTitle"] = "Catálogo de Libros";

    var libros = Model?.Data ?? new List<LibroListaView>();
    var paginacion = Model?.Pagination ?? new PaginationInfo();
    var terminoBusqueda = ViewBag.TerminoBusqueda as string ?? "";
    var buscarPorDescripcion = ViewBag.BuscarPorDescripcion as bool? ?? false;
}


<!-- Contenido específico de Libros -->
<div class="container-fluid p-4">
    <div class="row justify-content-center fade-in">
        <div class="col-12">
            <div class="card libros-card">
                <div class="card-body p-4">
                    <!-- Header con Título y Botones REORGANIZADOS -->
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <h2 class="mb-1">
                                <i class="fas fa-book me-2" style="color: var(--esparza-blue);"></i>
                                Catálogo de Libros
                            </h2>
                            <p class="text-muted mb-0">Gestiona el inventario de libros de la biblioteca</p>
                        </div>
                        <div class="d-flex gap-2">
                            <!-- Botón Importar desde Excel - MOVIDO ARRIBA -->
                            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#importarLibrosModal">
                                <i class="fas fa-file-import"></i> Importar Excel
                            </button>

                            <!-- Botón Nuevo Libro - MOVIDO ABAJO -->
                            <button class="btn btn-libros-primary" data-bs-toggle="modal" data-bs-target="#agregarLibroModal">
                                <i class="fas fa-plus-circle"></i> Nuevo Libro
                            </button>
                        </div>
                    </div>

                    <!-- Formulario de Búsqueda CORREGIDO -->
                    <form asp-action="Index" method="get" class="search-filter-section" id="searchForm">
                        <div class="row g-3">
                            <!-- Búsqueda -->
                            <div class="col-12 col-xl-8">
                                <div class="search-container">
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-search text-muted"></i>
                                        </span>
                                        <input type="text" class="form-control" name="termino" id="searchInput"
                                               placeholder="Buscar por título, autor, ISBN..."
                                               value="@terminoBusqueda">
                                        <button class="btn btn-esparza-primary" type="submit" id="btnBuscar">
                                            <i class="fas fa-search me-1"></i>Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Opción Buscar por Descripción -->
                            <div class="col-12 col-xl-4">
                                <div class="filter-container">
                                    <div class="form-check form-switch d-flex align-items-center h-100">
                                        <input class="form-check-input me-2" type="checkbox"
                                               id="buscarPorDescripcion" name="buscarPorDescripcion"
                                               value="true" @(buscarPorDescripcion ? "checked" : "")>
                                        <label class="form-check-label fw-medium" for="buscarPorDescripcion">
                                            <i class="fas fa-align-left me-1 text-muted"></i>
                                            Buscar por descripción
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Campos ocultos para paginación CORREGIDOS -->
                        <input type="hidden" name="pagina" id="paginaHidden" value="@paginacion.PaginaActual" />
                        <input type="hidden" name="resultadosPorPagina" value="20" />
                    </form>

                    <!-- Información de resultados -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="text-muted small">
                            @if (!string.IsNullOrEmpty(terminoBusqueda))
                            {
                                <span id="resultCount">@paginacion.TotalResultados</span>
                                <span>libros encontrados para "@terminoBusqueda"</span>
                                @if (buscarPorDescripcion)
                                {
                                    <span class="badge bg-info ms-2">
                                        <i class="fas fa-align-left me-1"></i>Incluyendo descripción
                                    </span>
                                }
                            }
                            else
                            {
                                <span id="resultCount">@paginacion.TotalResultados</span>
                                <span>libros en el catálogo</span>
                            }
                        </div>
                        <div class="d-flex gap-2">
                            @if (!string.IsNullOrEmpty(terminoBusqueda) || buscarPorDescripcion)
                            {
                                <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-times me-1"></i>Limpiar búsqueda
                                </a>
                            }
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="btnLimpiarFiltros">
                                <i class="fas fa-filter me-1"></i>Limpiar filtro
                            </button>
                        </div>
                    </div>

                    <!-- Alertas -->
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (ViewBag.Error != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @ViewBag.Error
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (!Model.Success && !string.IsNullOrEmpty(Model.Message))
                    {
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @Model.Message
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    

                    <!-- Grid de Libros -->
                    @if (libros.Any())
                    {
                        <div class="row g-4" id="librosGrid">
                            @foreach (var libro in libros)
                            {
                                <div class="col-xxl-3 col-xl-4 col-lg-6 col-md-6 col-sm-12 libro-item">
                                    <div class="card libro-card h-100 zoom-in mb-3">
                                        <div class="card-body">
                                            <!-- Portada -->
                                            <div class="text-center mb-3">
                                                <img src="@libro.PortadaUrl"
                                                     alt="Portada de @libro.Titulo"
                                                     class="libro-portada img-fluid rounded"
                                                     onerror="this.src='/imagenes/portadas/default-book-cover.jpg'">
                                            </div>

                                            <!-- Información del libro -->
                                            <h6 class="card-title libro-titulo">@libro.Titulo</h6>

                                            <div class="libro-info">
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-barcode me-2 text-muted small"></i>
                                                    <small class="text-muted">@libro.ISBN</small>
                                                </div>

                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-user-edit me-2 text-muted small"></i>
                                                    @if (libro.Autor != null && libro.Autor.Any())
                                                    {
                                                        <small>@string.Join(", ", libro.Autor)</small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-muted">Sin autor</small>
                                                    }
                                                </div>

                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-building me-2 text-muted small"></i>
                                                    <small>@libro.Editorial</small>
                                                </div>

                                                <div class="d-flex align-items-center mb-2">
                                                    <i class="fas fa-tag me-2 text-muted small"></i>
                                                    @if (libro.Genero != null && libro.Genero.Any())
                                                    {
                                                        <small>@string.Join(", ", libro.Genero)</small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-muted">Sin género</small>
                                                    }
                                                </div>
                                            </div>

                                            <!-- Estado -->
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge badge-estado @GetEstadoBadgeClass(libro.Estado)">
                                                    <i class="fas @GetEstadoIcon(libro.Estado) me-1"></i>
                                                    @libro.Estado
                                                </span>
                                                <button type="button" class="btn btn-sm btn-libro-detalle"
                                                        onclick="verDetalle(@libro.IdLibro)">
                                                    <i class="fas fa-eye"></i>
                                                    Ver Detalle
                                                </button>

                                                <button type="button" class="btn btn-sm btn-warning"
                                                        onclick="editarLibro(@libro.IdLibro)">
                                                    <i class="fas fa-edit"></i> Editar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Paginación CORREGIDA -->
                        @if (paginacion.TotalPaginas > 1)
                        {
                            <nav aria-label="Paginación de resultados">
                                <ul class="pagination justify-content-center mt-4">
                                    <!-- Botón Anterior -->
                                    <li class="page-item @(paginacion.PaginaActual == 1 ? "disabled" : "")">
                                        @if (paginacion.PaginaActual > 1)
                                        {
                                            <button type="button" onclick="cambiarPagina(@(paginacion.PaginaActual - 1))"
                                                    class="page-link">
                                                <i class="fas fa-chevron-left"></i> Anterior
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="page-link"><i class="fas fa-chevron-left"></i> Anterior</span>
                                        }
                                    </li>

                                    <!-- Números de página -->
                                    @{
                                        int inicio = Math.Max(1, paginacion.PaginaActual - 2);
                                        int fin = Math.Min(paginacion.TotalPaginas, paginacion.PaginaActual + 2);
                                    }

                                    @for (int i = inicio; i <= fin; i++)
                                    {
                                        <li class="page-item @(i == paginacion.PaginaActual ? "active" : "")">
                                            <button type="button" onclick="cambiarPagina(@i)"
                                                    class="page-link">
                                                @i
                                            </button>
                                        </li>
                                    }

                                    <!-- Botón Siguiente -->
                                    <li class="page-item @(paginacion.PaginaActual >= paginacion.TotalPaginas ? "disabled" : "")">
                                        @if (paginacion.PaginaActual < paginacion.TotalPaginas)
                                        {
                                            <button type="button" onclick="cambiarPagina(@(paginacion.PaginaActual + 1))"
                                                    class="page-link">
                                                Siguiente <i class="fas fa-chevron-right"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="page-link">Siguiente <i class="fas fa-chevron-right"></i></span>
                                        }
                                    </li>
                                </ul>

                                <!-- Información de página actual -->
                                <div class="text-center text-muted small mt-2">
                                    Página @paginacion.PaginaActual de @paginacion.TotalPaginas
                                    - Mostrando @libros.Count de @paginacion.TotalResultados libros
                                </div>
                            </nav>
                        }
                    }
                    else if (!string.IsNullOrEmpty(terminoBusqueda))
                    {
                        <div class="empty-state text-center py-5">
                            <i class="fas fa-search fa-4x text-muted mb-3"></i>
                            <h4>No se encontraron resultados</h4>
                            <p class="text-muted">No hay libros que coincidan con "@terminoBusqueda"</p>
                            @if (buscarPorDescripcion)
                            {
                                <p class="text-muted small">Incluyendo búsqueda en descripciones</p>
                            }
                            <a href="@Url.Action("Index")" class="btn btn-esparza-primary mt-3">
                                <i class="fas fa-book me-2"></i>Ver todos los libros
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state text-center py-5">
                            <i class="fas fa-book-open fa-4x text-muted mb-3"></i>
                            <h4>No hay libros en el catálogo</h4>
                            <p class="text-muted">No se encontraron libros en el sistema. Comienza agregando el primer libro.</p>
                            <button type="button" class="btn btn-esparza-primary mt-3" data-bs-toggle="modal" data-bs-target="#agregarLibroModal">
                                <i class="fas fa-book-medical me-2"></i>Agregar Primer Libro
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL AGREGAR LIBRO -->
    <div class="modal fade modal-libros" id="agregarLibroModal" tabindex="-1" aria-labelledby="agregarLibroModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content zoom-in">
                <div class="modal-header">
                    <h5 class="modal-title" id="agregarLibroModalLabel">
                        <i class="fas fa-book-medical me-2"></i> Agregar Nuevo Libro
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <form id="formAgregarLibro" asp-action="RegistroLibro" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <input type="hidden" id="IdLibro" name="IdLibro" value="0">
                    <div class="modal-body">
                        <div class="row">
                            <!-- Título -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label for="Titulo" class="form-label-libros">
                                        <i class="fas fa-heading"></i> Título
                                    </label>
                                    <input type="text" id="Titulo" name="Titulo" class="form-control form-control-libros" required placeholder="Ingrese el título del libro">
                                </div>
                            </div>

                            <!-- ISBN -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label for="ISBN" class="form-label-libros">
                                        <i class="fas fa-barcode"></i> ISBN
                                    </label>
                                    <input type="text" id="ISBN" name="ISBN" class="form-control form-control-libros" required placeholder="Ingrese el ISBN" >
                                </div>
                            </div>

                            <!-- Imagen del Libro -->
                            <div class="col-md-12">
                                <div class="form-group-libros">
                                    <label for="ImagenArchivo" class="form-label-libros">
                                        <i class="fas fa-image"></i> Imagen del Libro
                                    </label>
                                    <input type="file" id="ImagenArchivo" name="ImagenArchivo" class="form-control form-control-libros" accept="image/*" />
                                    <small class="text-muted">Formatos aceptados: JPG, PNG, GIF. Tamaño máximo: 5MB</small>
                                    <div class="mt-3 text-center">
                                        <img id="previewImagenLibro" src="#" alt="Vista previa de la imagen" class="img-thumbnail d-none" style="max-height: 150px;" />
                                    </div>
                                </div>
                            </div>

                            <!-- Géneros (Dropdown con Chips) -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label class="form-label-libros">
                                        <i class="fas fa-tags"></i> Género(s)
                                    </label>
                                    <div class="dropdown-chip-container">
                                        <div class="selected-chips-container" id="generosChipsContainer">
                                            <!-- Los chips de géneros seleccionados aparecerán aquí -->
                                        </div>
                                        <div class="dropdown-search-container">
                                            <input type="text"
                                                   class="form-control form-control-libros dropdown-search-input"
                                                   id="generosSearch"
                                                   placeholder="Buscar géneros..."
                                                   data-bs-toggle="dropdown"
                                                   aria-expanded="false">
                                            <i class="fas fa-search dropdown-search-icon"></i>
                                            <ul class="dropdown-menu dropdown-chip-menu w-100" id="generosDropdown">
                                                <li class="dropdown-header">Seleccione uno o más géneros</li>
                                                <li class="dropdown-divider"></li>
                                                @if (ViewBag.Generos is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> generos && generos.Any())
                                                {
                                                    foreach (var genero in generos)
                                                    {
                                                        if (genero.Value != "0") // Excluir la opción por defecto
                                                        {
                                                            <li>
                                                                <a class="dropdown-item" href="#" data-value="@genero.Value" data-text="@genero.Text">
                                                                    <i class="fas fa-tag me-2"></i>@genero.Text
                                                                </a>
                                                            </li>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <li><a class="dropdown-item disabled" href="#">No hay géneros disponibles</a></li>
                                                }
                                            </ul>
                                        </div>
                                        <input type="hidden" id="GenerosSeleccionados" name="GenerosSeleccionados" />
                                    </div>
                                </div>
                            </div>

                            <!-- Autores (Dropdown con Chips) -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label class="form-label-libros">
                                        <i class="fas fa-user-edit"></i> Autor(es)
                                    </label>
                                    <div class="dropdown-chip-container">
                                        <div class="selected-chips-container" id="autoresChipsContainer">
                                            <!-- Los chips de autores seleccionados aparecerán aquí -->
                                        </div>
                                        <div class="dropdown-search-container">
                                            <input type="text"
                                                   class="form-control form-control-libros dropdown-search-input"
                                                   id="autoresSearch"
                                                   placeholder="Buscar autores..."
                                                   data-bs-toggle="dropdown"
                                                   aria-expanded="false">
                                            <i class="fas fa-search dropdown-search-icon"></i>
                                            <ul class="dropdown-menu dropdown-chip-menu w-100" id="autoresDropdown">
                                                <li class="dropdown-header">Seleccione uno o más autores</li>
                                                <li class="dropdown-divider"></li>
                                                @if (ViewBag.Autores is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> autores && autores.Any())
                                                {
                                                    foreach (var autor in autores)
                                                    {
                                                        if (autor.Value != "0") // Excluir la opción por defecto
                                                        {
                                                            <li>
                                                                <a class="dropdown-item" href="#" data-value="@autor.Value" data-text="@autor.Text">
                                                                    <i class="fas fa-user me-2"></i>@autor.Text
                                                                </a>
                                                            </li>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <li><a class="dropdown-item disabled" href="#">No hay autores disponibles</a></li>
                                                }
                                            </ul>
                                        </div>
                                        <input type="hidden" id="AutoresSeleccionados" name="AutoresSeleccionados" />
                                    </div>
                                </div>
                            </div>

                            <!-- Editorial -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label for="EditorialId" class="form-label-libros">
                                        <i class="fas fa-building"></i> Editorial
                                    </label>
                                    <select id="EditorialId" name="EditorialId" class="form-control form-control-libros">
                                        <option value="0">— Seleccione una editorial —</option>
                                        @if (ViewBag.Editoriales is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> editoriales && editoriales.Any())
                                        {
                                            foreach (var editorial in editoriales)
                                            {
                                                if (editorial.Value != "0")
                                                {
                                                    <option value="@editorial.Value">@editorial.Text</option>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <option disabled>— No hay editoriales disponibles —</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <!-- Sección -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label for="SeccionId" class="form-label-libros">
                                        <i class="fas fa-layer-group"></i> Sección
                                    </label>
                                    <select id="SeccionId" name="SeccionId" class="form-control form-control-libros">
                                        <option value="0">— Seleccione una sección —</option>
                                        @if (ViewBag.Secciones is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> secciones && secciones.Any())
                                        {
                                            foreach (var seccion in secciones)
                                            {
                                                if (seccion.Value != "0")
                                                {
                                                    <option value="@seccion.Value">@seccion.Text</option>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <option disabled>— No hay secciones disponibles —</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <!-- Estado -->
                            <div class="col-md-6">
                                <div class="form-group-libros">
                                    <label for="Estado" class="form-label-libros">
                                        <i class="fas fa-toggle-on"></i> Estado
                                    </label>
                                    <select id="Estado" name="Estado" class="form-control form-control-libros">
                                        <option value="Disponible">Disponible</option>
                                        <option value="No Disponible">No Disponible</option>
                                        <option value="En Préstamo">En Préstamo</option>
                                        <option value="En Reparación">En Reparación</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Descripción -->
                            <div class="col-md-12">
                                <div class="form-group-libros">
                                    <label for="Descripcion" class="form-label-libros">
                                        <i class="fas fa-align-left"></i> Descripción
                                    </label>
                                    <textarea id="Descripcion" name="Descripcion"
                                              class="form-control form-control-libros"
                                              rows="3"
                                              placeholder="Ingrese una descripción del libro (opcional)"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-libros-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-libros-primary">
                            <i class="fas fa-save me-2"></i> Guardar Libro
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- MODAL DETALLE LIBRO -->
    <div class="modal fade modal-libros" id="detalleLibroModal" tabindex="-1" aria-labelledby="detalleLibroModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content zoom-in">
                <div class="modal-header">
                    <h5 class="modal-title" id="detalleLibroModalLabel">
                        <i class="fas fa-info-circle me-2"></i> Detalles del Libro
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body" id="detalleLibroContent">
                    <!-- El contenido se cargará dinámicamente aquí -->
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2 text-muted">Cargando información del libro...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-libros-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL IMPORTAR LIBROS DESDE EXCEL - CORREGIDO -->
    <div class="modal fade modal-libros" id="importarLibrosModal" tabindex="-1" aria-labelledby="importarLibrosModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content zoom-in">
                <div class="modal-header">
                    <h5 class="modal-title" id="importarLibrosModalLabel">
                        <i class="fas fa-file-import me-2 text-success"></i> Importar Libros desde Excel
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <form id="formImportarLibros" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        <!-- Instrucciones - CORREGIDO: Sin clase "alert" de Bootstrap -->
                        <div class="instruction-card mb-4" id="instruccionesImportacion">
                            <div class="d-flex">
                                <i class="fas fa-info-circle me-3 mt-1 text-info"></i>
                                <div>
                                    <h6 class="instruction-title mb-2">Instrucciones de Importación</h6>
                                    <ol class="instruction-list mb-0">
                                        @if (ViewBag.Info != null)
                                        {
                                            @Html.Raw(ViewBag.Info)
                                        }
                                        else
                                        {
                                            <li>Descarga la plantilla usando el enlace inferior</li>
                                            <li>Llena la plantilla con los datos de los libros</li>
                                            <li>Mantén el formato de columnas y no modifiques los encabezados</li>
                                            <li>Para autores y géneros múltiples, sepáralos por comas</li>
                                            <li>Sube el archivo completado</li>
                                        }
                                    </ol>
                                </div>
                            </div>
                        </div>

                        <!-- Campo de archivo -->
                        <div class="form-group-libros mb-4">
                            <label for="archivoExcel" class="form-label-libros">
                                <i class="fas fa-file-excel text-success me-2"></i> Archivo Excel
                            </label>
                            <input type="file"
                                   id="archivoExcel"
                                   name="archivo"
                                   class="form-control form-control-libros"
                                   accept=".xlsx,.xls"
                                   required>
                            <div class="form-text">
                                Formatos aceptados: .xlsx, .xls | Tamaño máximo: 10MB
                            </div>
                        </div>

                        <!-- Enlace para descargar plantilla -->
                        <div class="text-center border-top pt-3">
                            <a href="@Url.Action("DescargarPlantillaImportacion", "Libro")"
                               class="btn btn-outline-success btn-sm"
                               id="btnDescargarPlantilla">
                                <i class="fas fa-download me-2"></i>Descargar Plantilla Excel
                            </a>
                            <div class="form-text mt-2">
                                ¿No tienes la plantilla? Descárgala aquí
                            </div>
                        </div>

                        <!-- Área para mostrar resultados -->
                        <div id="resultadoImportacion" class="mt-3" style="display: none;">
                            <!-- Los resultados se mostrarán aquí dinámicamente -->
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-libros-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-success" id="btnImportar">
                            <i class="fas fa-upload me-2"></i> Iniciar Importación
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // Declara los managers globalmente
        let generosManager, autoresManager;

        document.addEventListener('DOMContentLoaded', function() {
            // =============================================
            // CONFIGURACIÓN DEL MODAL DE IMPORTACIÓN
            // =============================================

            // Configurar el modal de importación
            const importarLibrosModal = document.getElementById('importarLibrosModal');
            if (importarLibrosModal) {
                const modalInstance = new bootstrap.Modal(importarLibrosModal);

                importarLibrosModal.addEventListener('show.bs.modal', function() {
                    // Asegurar que las instrucciones sean visibles
                    const instrucciones = document.getElementById('instruccionesImportacion');
                    if (instrucciones) {
                        instrucciones.style.display = 'block';
                    }

                    // Ocultar resultados anteriores
                    const resultadoImportacion = document.getElementById('resultadoImportacion');
                    if (resultadoImportacion) {
                        resultadoImportacion.style.display = 'none';
                        resultadoImportacion.innerHTML = '';
                    }
                });

                importarLibrosModal.addEventListener('hidden.bs.modal', function() {
                    // Limpiar resultados cuando se cierra el modal
                    const resultadoImportacion = document.getElementById('resultadoImportacion');
                    if (resultadoImportacion) {
                        resultadoImportacion.innerHTML = '';
                        resultadoImportacion.style.display = 'none';
                    }

                    // Resetear el formulario
                    const formImportarLibros = document.getElementById('formImportarLibros');
                    if (formImportarLibros) {
                        formImportarLibros.reset();
                    }

                    // Resetear el botón de importar
                    const btnImportar = document.getElementById('btnImportar');
                    if (btnImportar) {
                        btnImportar.innerHTML = '<i class="fas fa-upload me-2"></i> Iniciar Importación';
                        btnImportar.disabled = false;
                    }
                    window.location.reload();
                });
            }

            // =============================================
            // FUNCIONALIDAD DE IMPORTACIÓN DESDE EXCEL MEJORADA
            // =============================================

            const formImportarLibros = document.getElementById('formImportarLibros');
            const archivoExcel = document.getElementById('archivoExcel');
            const btnImportar = document.getElementById('btnImportar');
            const resultadoImportacion = document.getElementById('resultadoImportacion');

            if (formImportarLibros) {
                formImportarLibros.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    // Validaciones básicas
                    if (!archivoExcel.files.length) {
                        mostrarAlertaTemporal('Por favor seleccione un archivo Excel', 'error');
                        return;
                    }

                    const file = archivoExcel.files[0];
                    const extension = file.name.split('.').pop().toLowerCase();

                    if (extension !== 'xlsx' && extension !== 'xls') {
                        mostrarAlertaTemporal('Solo se permiten archivos Excel (.xlsx, .xls)', 'error');
                        return;
                    }

                    // Validar tamaño del archivo (10MB máximo)
                    if (file.size > 10 * 1024 * 1024) {
                        mostrarAlertaTemporal('El archivo es demasiado grande. Tamaño máximo: 10MB', 'error');
                        return;
                    }

                    // Mostrar loading
                    const originalText = btnImportar.innerHTML;
                    btnImportar.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Importando...';
                    btnImportar.disabled = true;

                    try {
                        // Crear FormData para enviar el archivo
                        const formData = new FormData();
                        formData.append('archivo', file);

                        // Realizar la petición AJAX
                        const response = await fetch('/Libro/ImportarLibrosExcel', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        // Verificar si la respuesta es JSON
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            const textResponse = await response.text();
                            console.error('Respuesta no JSON recibida:', textResponse.substring(0, 500));

                            if (response.status === 401 || response.status === 403) {
                                throw new Error('Error de autenticación. Por favor, inicie sesión nuevamente.');
                            } else if (response.status === 500) {
                                throw new Error('Error interno del servidor. Por favor, contacte al administrador.');
                            } else {
                                throw new Error('Error del servidor: ' + response.status + ' - ' + response.statusText);
                            }
                        }

                        const result = await response.json();

                        // Mostrar resultados
                        mostrarResultadoImportacion(result);

                    } catch (error) {
                        console.error('Error en la importación:', error);
                        mostrarResultadoImportacion({
                            success: false,
                            message: 'Error al procesar la importación: ' + error.message
                        });
                    } finally {
                        if (btnImportar) {
                            btnImportar.innerHTML = originalText;
                            btnImportar.disabled = false;
                        }
                    }
                });
            }

            // Mostrar nombre del archivo seleccionado
            if (archivoExcel) {
                archivoExcel.addEventListener('change', function() {
                    if (this.files.length > 0) {
                        if (resultadoImportacion) {
                            resultadoImportacion.style.display = 'none';
                            resultadoImportacion.innerHTML = '';
                        }
                    }
                });
            }

            // =============================================
            // FUNCIONALIDAD DE BÚSQUEDA Y PAGINACIÓN CORREGIDA
            // =============================================
            // ... (todo tu código existente de búsqueda y paginación se mantiene igual)
            const searchInput = document.getElementById('searchInput');
            const buscarPorDescripcion = document.getElementById('buscarPorDescripcion');
            const btnLimpiarFiltros = document.getElementById('btnLimpiarFiltros');
            const paginaHidden = document.getElementById('paginaHidden');
            const searchForm = document.getElementById('searchForm');

            // Función para cambiar página
            window.cambiarPagina = function(pagina) {
                paginaHidden.value = pagina;
                searchForm.submit();
            }

            // Limpiar filtro de búsqueda por descripción
            function limpiarFiltros() {
                if (buscarPorDescripcion.checked) {
                    buscarPorDescripcion.checked = false;
                    paginaHidden.value = 1;
                    searchForm.submit();
                }
            }

            // Enviar formulario automáticamente al cambiar el checkbox
            buscarPorDescripcion.addEventListener('change', function() {
                paginaHidden.value = 1;
                searchForm.submit();
            });

            // Event listeners
            btnLimpiarFiltros.addEventListener('click', limpiarFiltros);

            // Al realizar una búsqueda nueva, volver a página 1
            searchForm.addEventListener('submit', function(e) {
                const activeElement = document.activeElement;
                if (!activeElement || activeElement.name !== 'pagina') {
                    paginaHidden.value = 1;
                }
            });

            // Auto-ocultar alertas
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);

            // Focus en el input de búsqueda si hay término
            @if (!string.IsNullOrEmpty(terminoBusqueda))
            {
                    <text>
                    setTimeout(function() {
                        searchInput.focus();
                        searchInput.select();
                    }, 100);
                    </text>
            }

            // Actualizar texto del botón "Limpiar filtro"
            function actualizarTextoBotonLimpiar() {
                if (buscarPorDescripcion.checked) {
                    btnLimpiarFiltros.innerHTML = '<i class="fas fa-filter me-1"></i>Quitar filtro descripción';
                } else {
                    btnLimpiarFiltros.innerHTML = '<i class="fas fa-filter me-1"></i>Limpiar filtro';
                }
            }

            actualizarTextoBotonLimpiar();
            buscarPorDescripcion.addEventListener('change', actualizarTextoBotonLimpiar);

            // =============================================
            // FUNCIONALIDAD DEL MODAL
            // =============================================
            console.log('Inicializando modal de libros...');

            // Vista previa de imagen
            const imagenArchivo = document.getElementById('ImagenArchivo');
            const previewImagen = document.getElementById('previewImagenLibro');

            if (imagenArchivo && previewImagen) {
                imagenArchivo.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            previewImagen.src = e.target.result;
                            previewImagen.classList.remove('d-none');
                        }
                        reader.readAsDataURL(file);
                    } else {
                        previewImagen.src = '#';
                        previewImagen.classList.add('d-none');
                    }
                });
            }

            // Sistema de chips simplificado
            class ChipManager {
                constructor(containerId, dropdownId, searchId, hiddenInputId) {
                    this.container = document.getElementById(containerId);
                    this.dropdown = document.getElementById(dropdownId);
                    this.searchInput = document.getElementById(searchId);
                    this.hiddenInput = document.getElementById(hiddenInputId);
                    this.selectedItems = new Map();
                    this.init();
                }

                init() {
                    this.setupSearch();
                    this.setupDropdown();
                    this.updateHiddenInput();
                    this.showEmptyMessage();
                }

                setupSearch() {
                    this.searchInput.addEventListener('input', (e) => {
                        const searchTerm = e.target.value.toLowerCase();
                        const items = this.dropdown.querySelectorAll('.dropdown-item:not(.disabled)');

                        items.forEach(item => {
                            const text = item.textContent.toLowerCase();
                            item.style.display = text.includes(searchTerm) ? 'block' : 'none';
                        });
                    });

                    this.searchInput.addEventListener('focus', () => {
                        new bootstrap.Dropdown(this.searchInput).show();
                    });
                }

                setupDropdown() {
                    this.dropdown.addEventListener('click', (e) => {
                        const target = e.target.closest('.dropdown-item');
                        if (target && !target.classList.contains('disabled')) {
                            e.preventDefault();
                            const value = target.getAttribute('data-value');
                            const text = target.getAttribute('data-text');

                            if (!this.selectedItems.has(value)) {
                                this.addChip(value, text);
                                target.classList.add('selected');
                            }

                            this.searchInput.value = '';
                            this.searchInput.focus();
                            bootstrap.Dropdown.getInstance(this.searchInput)?.hide();
                        }
                    });
                }

                addChip(value, text) {
                    this.selectedItems.set(value, text);

                    const chip = document.createElement('div');
                    chip.className = 'chip';
                    chip.innerHTML = `
                        <span>${text}</span>
                        <button type="button" class="chip-remove" data-value="${value}">
                            <i class="fas fa-times"></i>
                        </button>
                    `;

                    this.container.appendChild(chip);
                    this.hideEmptyMessage();

                    chip.querySelector('.chip-remove').addEventListener('click', (e) => {
                        e.preventDefault();
                        this.removeChip(value);
                    });

                    this.updateHiddenInput();
                }

                removeChip(value) {
                    this.selectedItems.delete(value);

                    const chip = this.container.querySelector(`.chip-remove[data-value="${value}"]`)?.closest('.chip');
                    if (chip) chip.remove();

                    const dropdownItem = this.dropdown.querySelector(`.dropdown-item[data-value="${value}"]`);
                    if (dropdownItem) dropdownItem.classList.remove('selected');

                    if (this.selectedItems.size === 0) this.showEmptyMessage();
                    this.updateHiddenInput();
                }

                updateHiddenInput() {
                    this.hiddenInput.value = Array.from(this.selectedItems.keys()).join(',');
                }

                showEmptyMessage() {
                    if (!this.container.querySelector('.empty-chips-message')) {
                        const emptyMessage = document.createElement('div');
                        emptyMessage.className = 'empty-chips-message';
                        emptyMessage.textContent = 'No hay elementos seleccionados';
                        this.container.appendChild(emptyMessage);
                    }
                }

                hideEmptyMessage() {
                    const emptyMessage = this.container.querySelector('.empty-chips-message');
                    if (emptyMessage) emptyMessage.remove();
                }
            }

            // Inicializar managers para géneros y autores - hacerlos globales
            generosManager = new ChipManager('generosChipsContainer', 'generosDropdown', 'generosSearch', 'GenerosSeleccionados');
            autoresManager = new ChipManager('autoresChipsContainer', 'autoresDropdown', 'autoresSearch', 'AutoresSeleccionados');

            // Validación del formulario del modal
            const formAgregarLibro = document.getElementById('formAgregarLibro');
            if (formAgregarLibro) {
                formAgregarLibro.addEventListener('submit', function(e) {
                    const generosSeleccionados = generosManager.selectedItems.size;
                    const autoresSeleccionados = autoresManager.selectedItems.size;

                    if (generosSeleccionados === 0) {
                        e.preventDefault();
                        showAlert('Por favor seleccione al menos un género', 'error');
                        return;
                    }

                    if (autoresSeleccionados === 0) {
                        e.preventDefault();
                        showAlert('Por favor seleccione al menos un autor', 'error');
                        return;
                    }
                });
            }

            // Cerrar dropdown cuando se hace click fuera
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.dropdown-chip-container')) {
                    document.querySelectorAll('.dropdown-chip-menu.show').forEach(dropdown => {
                        const searchInput = dropdown.previousElementSibling;
                        bootstrap.Dropdown.getInstance(searchInput)?.hide();
                    });
                }
            });

            // Event listener para cuando se cierra el modal de edición
            document.getElementById('agregarLibroModal').addEventListener('hidden.bs.modal', function () {
                setTimeout(() => {
                    resetearModalACreacion();
                }, 300);
            });
        });

        // =============================================
        // FUNCIONES MEJORADAS PARA IMPORTACIÓN
        // =============================================

        // Función para mostrar resultados de importación MEJORADA
        function mostrarResultadoImportacion(result) {
            if (!resultadoImportacion) return;

            let html = '';

            if (result.success) {
                // ÉXITO TOTAL - Todo salió perfectamente
                html = `
                    <div class="alert alert-success">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-check-circle fa-2x me-3"></i>
                            <div>
                                <h6 class="mb-1">¡Importación completada exitosamente!</h6>
                                <p class="mb-0">${result.message}</p>
                            </div>
                        </div>
                    </div>
                `;

                // Mostrar estadísticas incluso en éxito
                if (result.data) {
                    html += crearEstadisticasImportacion(result.data);
                }

            } else {
                // ERROR - Puede ser parcial o total
                const esErrorParcial = result.data && result.data.insertados > 0;

                html = `
                    <div class="alert ${esErrorParcial ? 'alert-warning' : 'alert-danger'}">
                        <div class="d-flex align-items-center">
                            <i class="fas ${esErrorParcial ? 'fa-exclamation-triangle' : 'fa-times-circle'} fa-2x me-3"></i>
                            <div>
                                <h6 class="mb-1">${esErrorParcial ? 'Importación parcial' : 'Importación fallida'}</h6>
                                <p class="mb-0">${result.message}</p>
                            </div>
                        </div>
                    </div>
                `;

                // Mostrar estadísticas
                if (result.data) {
                    html += crearEstadisticasImportacion(result.data);

                    // Mostrar errores detallados si existen
                    if (result.data.detallesErrores && result.data.detallesErrores.length > 0) {
                        html += crearListaErrores(result.data.detallesErrores);
                    }
                }
            }

            resultadoImportacion.innerHTML = html;
            resultadoImportacion.style.display = 'block';
            resultadoImportacion.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        // Función auxiliar para estadísticas
        function crearEstadisticasImportacion(data) {
            return `
                <div class="row text-center mt-3">
                    <div class="col-4">
                        <div class="border rounded p-2 bg-light">
                            <div class="h4 mb-0 text-primary">${data.total || 0}</div>
                            <small class="text-muted">Total procesados</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="border rounded p-2 bg-light">
                            <div class="h4 mb-0 text-success">${data.insertados || 0}</div>
                            <small class="text-muted">Insertados</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="border rounded p-2 bg-light">
                            <div class="h4 mb-0 text-danger">${data.errores || 0}</div>
                            <small class="text-muted">Errores</small>
                        </div>
                    </div>
                </div>
            `;
        }

        // Función auxiliar para lista de errores con mejoras
        function crearListaErrores(detallesErrores) {
            const totalErrores = detallesErrores.length;
            const mostrarTodos = totalErrores <= 10;
            const erroresVisibles = mostrarTodos ? detallesErrores : detallesErrores.slice(0, 10);
            const erroresId = 'errores-' + Date.now();

            return `
                <div class="mt-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="text-warning mb-0">
                            <i class="fas fa-exclamation-triangle me-1"></i>Detalles de errores (${totalErrores})
                        </h6>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-secondary me-2"
                                    onclick="copiarErrores('${erroresId}')"
                                    title="Copiar todos los errores al portapapeles">
                                <i class="fas fa-copy me-1"></i>Copiar Log
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-info"
                                    onclick="descargarLogErrores('${erroresId}')"
                                    title="Descargar archivo con todos los errores">
                                <i class="fas fa-download me-1"></i>Descargar
                            </button>
                        </div>
                    </div>

                    <div class="error-scroll small" id="${erroresId}" data-errores-completos='${JSON.stringify(detallesErrores)}'>
                        <ul class="mb-0">
                            ${erroresVisibles.map(error => `<li class="text-danger">${error}</li>`).join('')}
                        </ul>

                        ${!mostrarTodos ? `
                            <div class="text-center mt-2">
                                <div class="mb-1">
                                    <small class="text-muted">Mostrando 10 de ${totalErrores} errores</small>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-warning"
                                        onclick="mostrarTodosLosErrores('${erroresId}')">
                                    <i class="fas fa-expand me-1"></i>Mostrar todos los errores
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }

        // Función para copiar errores al portapapeles
        function copiarErrores(erroresId) {
            const contenedorErrores = document.getElementById(erroresId);
            if (!contenedorErrores) return;

            const erroresCompletos = JSON.parse(contenedorErrores.dataset.erroresCompletos);
            const textoErrores = erroresCompletos.join('\n');

            navigator.clipboard.writeText(textoErrores)
                .then(() => {
                    const btn = event.target;
                    const originalHTML = btn.innerHTML;
                    btn.innerHTML = '<i class="fas fa-check me-1"></i>Copiado!';
                    btn.classList.remove('btn-outline-secondary');
                    btn.classList.add('btn-success');

                    setTimeout(() => {
                        btn.innerHTML = originalHTML;
                        btn.classList.remove('btn-success');
                        btn.classList.add('btn-outline-secondary');
                    }, 2000);
                })
                .catch(err => {
                    console.error('Error al copiar: ', err);
                    alert('No se pudo copiar al portapapeles. Use la opción de descargar.');
                });
        }

        // Función para descargar log de errores
        function descargarLogErrores(erroresId) {
            const contenedorErrores = document.getElementById(erroresId);
            if (!contenedorErrores) return;

            const erroresCompletos = JSON.parse(contenedorErrores.dataset.erroresCompletos);
            const textoErrores = erroresCompletos.join('\r\n');

            const blob = new Blob([textoErrores], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `errores-importacion-${new Date().toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Función para expandir y mostrar todos los errores
        function mostrarTodosLosErrores(erroresId) {
            const contenedorErrores = document.getElementById(erroresId);
            if (!contenedorErrores) return;

            const erroresCompletos = JSON.parse(contenedorErrores.dataset.erroresCompletos);
            const listaHTML = erroresCompletos.map(error => `<li class="text-danger">${error}</li>`).join('');
            contenedorErrores.querySelector('ul').innerHTML = listaHTML;

            const botonContainer = contenedorErrores.querySelector('.text-center');
            if (botonContainer) {
                botonContainer.style.display = 'none';
            }
        }

        // Función para mostrar alertas temporales
        function mostrarAlertaTemporal(mensaje, tipo) {
            const alerta = document.createElement('div');
            alerta.className = `alert alert-${tipo === 'error' ? 'danger' : 'warning'} alert-dismissible fade show`;
            alerta.innerHTML = `
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            const campoArchivo = document.querySelector('.form-group-libros');
            if (campoArchivo) {
                campoArchivo.parentNode.insertBefore(alerta, campoArchivo.nextSibling);
            }

            setTimeout(() => {
                if (alerta.parentNode) {
                    alerta.remove();
                }
            }, 5000);
        }

        // =============================================
        // FUNCIONES EXISTENTES (se mantienen igual)
        // =============================================

        // Función auxiliar para limpiar chips
        function limpiarChipsExistentes() {
            // Limpiar autores
            autoresManager.selectedItems.clear();
            document.getElementById('autoresChipsContainer').innerHTML = '';
            autoresManager.showEmptyMessage();

            // Limpiar géneros
            generosManager.selectedItems.clear();
            document.getElementById('generosChipsContainer').innerHTML = '';
            generosManager.showEmptyMessage();

            document.querySelectorAll('#autoresDropdown .dropdown-item.selected').forEach(item => {
                item.classList.remove('selected');
            });
            document.querySelectorAll('#generosDropdown .dropdown-item.selected').forEach(item => {
                item.classList.remove('selected');
            });

            console.log('Chips limpiados exitosamente');
        }

        /*
         * Funciones para editar libro
         */
        async function editarLibro(idLibro) {
            try {
                console.log('Editando libro ID:', idLibro);

                document.getElementById('agregarLibroModalLabel').innerHTML =
                    '<i class="fas fa-edit me-2"></i> Editar Libro';

                await cargarDatosLibroParaEditar(idLibro);

                const modal = new bootstrap.Modal(document.getElementById('agregarLibroModal'));
                modal.show();

            } catch (error) {
                console.error('Error al abrir modal de edición:', error);
                showAlert('Error al cargar el libro para editar', 'error');
            }
        }

        async function cargarDatosLibroParaEditar(idLibro) {
            try {
                console.log('Cargando datos para libro ID:', idLibro);

                const response = await fetch(`/Libro/ObtenerLibroParaEditar?id=${idLibro}`);

                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor');
                }

                const result = await response.json();
                console.log('Respuesta del servidor:', result);

                if (result.success) {
                    const libro = result.data;
                    llenarFormularioEdicion(libro);
                } else {
                    throw new Error(result.message);
                }

            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al cargar los datos del libro: ' + error.message, 'error');
            }
        }

        function llenarFormularioEdicion(libro) {
            console.log('Datos del libro recibidos para edición:', libro);

            // 1. Campos básicos
            document.getElementById('IdLibro').value = libro.idLibro || '';
            document.getElementById('Titulo').value = libro.titulo || '';
            document.getElementById('ISBN').value = libro.isbn || '';
            document.getElementById('EditorialId').value = libro.editorialId || '';
            document.getElementById('SeccionId').value = libro.seccionId || '';
            document.getElementById('Descripcion').value = libro.descripcion || '';

            // 2. Estado - mapeo correcto
            const estadoMap = {
                'disponible': 'Disponible',
                'no disponible': 'No Disponible',
                'en préstamo': 'En Préstamo',
                'en reparación': 'En Reparación'
            };

            const estadoSelect = document.getElementById('Estado');
            const estadoNormalizado = libro.estado?.toLowerCase();
            estadoSelect.value = estadoMap[estadoNormalizado] || 'Disponible';
            console.log('Estado seleccionado:', estadoSelect.value);

            // 3. Limpiar chips existentes
            limpiarChipsExistentes();

            // 4. Cargar autores - con delay para asegurar que se limpiaron primero
            setTimeout(() => {
                if (libro.autores && Array.isArray(libro.autores)) {
                    console.log('Cargando autores:', libro.autores);
                    libro.autores.forEach(autor => {
                        if (autor.id && autor.nombre) {
                            autoresManager.addChip(autor.id.toString(), autor.nombre);
                        }
                    });
                }

                // 5. Cargar géneros
                if (libro.generos && Array.isArray(libro.generos)) {
                    console.log('Cargando géneros:', libro.generos);
                    libro.generos.forEach(genero => {
                        if (genero.id && genero.nombre) {
                            generosManager.addChip(genero.id.toString(), genero.nombre);
                        }
                    });
                }
            }, 100);

            // 6. Cargar imagen - CORREGIDO (usar portadaUrl en lugar de portada)
            const preview = document.getElementById('previewImagenLibro');
            if (libro.portadaUrl && libro.portadaUrl !== '/imagenes/portadas/default-book-cover.jpg') {
                preview.src = libro.portadaUrl;
                preview.classList.remove('d-none');
                console.log('Imagen cargada:', libro.portadaUrl);
            } else {
                preview.src = '#';
                preview.classList.add('d-none');
                console.log('Imagen por defecto o no disponible');
            }

            // 7. Cambiar action del form para edición
            const form = document.getElementById('formAgregarLibro');
            form.action = '/Libro/Edit';
            console.log('Formulario configurado para edición');
        }

        function resetearModalACreacion() {
            console.log('Reseteando modal a modo creación');

            document.getElementById('agregarLibroModalLabel').innerHTML =
                '<i class="fas fa-book-medical me-2"></i> Agregar Nuevo Libro';

            // Resetear formulario
            document.getElementById('formAgregarLibro').reset();
            document.getElementById('IdLibro').value = '0';

            // Limpiar chips
            limpiarChipsExistentes();

            // Resetear estado a valor por defecto
            document.getElementById('Estado').value = 'Disponible';

            // Ocultar preview de imagen
            const preview = document.getElementById('previewImagenLibro');
            preview.src = '#';
            preview.classList.add('d-none');

            // Resetear action del form
            document.getElementById('formAgregarLibro').action = '/Libro/RegistroLibro';

            // Limpiar archivo de imagen
            document.getElementById('ImagenArchivo').value = '';
        }

        // Funciones globales
        async function verDetalle(idLibro) {
            try {
                const modal = new bootstrap.Modal(document.getElementById('detalleLibroModal'));
                modal.show();

                document.getElementById('detalleLibroContent').innerHTML = `
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2 text-muted">Cargando información del libro...</p>
                    </div>
                `;

                await cargarDetalleLibro(idLibro);
            } catch (error) {
                console.error('Error al abrir modal de detalles:', error);
                showAlert('Error al cargar los detalles del libro', 'error');
            }
        }

        async function cargarDetalleLibro(idLibro) {
            try {
                const response = await fetch(`/Libro/ObtenerDetalleLibro?id=${idLibro}`);

                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor');
                }

                const result = await response.json();

                if (result.success) {
                    const libro = result.data;
                    mostrarDetalleLibro(libro);
                } else {
                    throw new Error(result.message);
                }

            } catch (error) {
                console.error('Error:', error);
                document.getElementById('detalleLibroContent').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Error al cargar los detalles del libro: ${error.message}
                    </div>
                `;
            }
        }

        function mostrarDetalleLibro(libro) {
            const contenido = `
                <div class="row">
                    <!-- Portada -->
                    <div class="col-md-4 text-center mb-4">
                        <img src="${libro.portada || '/imagenes/portadas/default-book-cover.jpg'}"
                             alt="Portada de ${libro.titulo}"
                             class="img-fluid rounded shadow"
                             style="max-height: 300px;"
                             onerror="this.src='/imagenes/portadas/default-book-cover.jpg'">
                    </div>

                    <!-- Información del libro -->
                    <div class="col-md-8">
                        <h4 class="text-primary">${libro.titulo}</h4>

                        <div class="libro-detalle-info">
                            <!-- ISBN -->
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-barcode me-3 text-muted fa-lg"></i>
                                <div>
                                    <strong>ISBN:</strong>
                                    <span class="ms-2">${libro.isbn}</span>
                                </div>
                            </div>

                            <!-- Autores -->
                            <div class="d-flex align-items-start mb-3">
                                <i class="fas fa-user-edit me-3 text-muted fa-lg mt-1"></i>
                                <div>
                                    <strong>Autor(es):</strong>
                                    <div class="ms-2">
                                        ${libro.autor && libro.autor.length > 0 ?
                                            libro.autor.map(autor =>
                                                `<span class="badge bg-primary me-1 mb-1">${autor}</span>`
                                            ).join('') :
                                            '<span class="text-muted">No especificado</span>'
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Géneros -->
                            <div class="d-flex align-items-start mb-3">
                                <i class="fas fa-tags me-3 text-muted fa-lg mt-1"></i>
                                <div>
                                    <strong>Género(s):</strong>
                                    <div class="ms-2">
                                        ${libro.genero && libro.genero.length > 0 ?
                                            libro.genero.map(genero =>
                                                `<span class="badge bg-success me-1 mb-1">${genero}</span>`
                                            ).join('') :
                                            '<span class="text-muted">No especificado</span>'
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Editorial -->
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-building me-3 text-muted fa-lg"></i>
                                <div>
                                    <strong>Editorial:</strong>
                                    <span class="ms-2">${libro.editorial || 'No especificada'}</span>
                                </div>
                            </div>

                            <!-- Sección -->
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-layer-group me-3 text-muted fa-lg"></i>
                                <div>
                                    <strong>Sección:</strong>
                                    <span class="ms-2">${libro.seccion || 'No especificada'}</span>
                                </div>
                            </div>

                            <!-- Descripción -->
                            ${libro.descripcion ? `
                                <div class="d-flex align-items-start mb-3">
                                    <i class="fas fa-align-left me-3 text-muted fa-lg mt-1"></i>
                                    <div class="flex-grow-1">
                                        <strong>Descripción:</strong>
                                        <div class="ms-2 mt-1 text-justify descripcion-contenedor"
                                             style="max-height: 200px; overflow-y: auto; padding: 10px; background: #f8f9fa; border-radius: 5px; border: 1px solid #e9ecef;">
                                            ${libro.descripcion}
                                        </div>
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('detalleLibroContent').innerHTML = contenido;
        }

        // Función para mostrar alertas
        function showAlert(message, type = 'success') {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';

            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1060;" role="alert">
                    <i class="fas ${iconClass} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', alertHtml);

            setTimeout(() => {
                const alertElement = document.querySelector('.alert.position-fixed');
                if (alertElement) {
                    new bootstrap.Alert(alertElement).close();
                }
            }, 5000);
        }
    </script>
}
@functions {
    // Función para obtener la clase CSS del badge según el estado
    public string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "disponible" => "bg-success",
            "prestado" => "bg-warning",
            "reservado" => "bg-info",
            "reparacion" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    // Función para obtener el icono según el estado
    public string GetEstadoIcon(string estado)
    {
        return estado?.ToLower() switch
        {
            "disponible" => "fa-check",
            "prestado" => "fa-exchange-alt",
            "reservado" => "fa-clock",
            "reparacion" => "fa-tools",
            _ => "fa-question"
        };
    }
}