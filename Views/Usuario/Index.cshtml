@model PaginacionResponse<UsuarioListaViewModel>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Gestión de Usuarios - Biblioteca Esparza";
    ViewData["PageTitle"] = "Gestión de Usuarios del Sistema";

    var usuarios = Model?.Data ?? new List<UsuarioListaViewModel>();
    var paginacion = Model?.Pagination ?? new PaginationInfo();
    var terminoBusqueda = ViewBag.TerminoBusqueda as string ?? "";
}

<!-- Contenido específico de Usuarios -->
<div class="container-fluid p-4">
    <div class="row justify-content-center fade-in-usuarios">
        <div class="col-12">
            <div class="card usuarios-card">
                <div class="card-body p-4">
                    <!-- Header con Título y Botón -->
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <h2 class="mb-1">
                                <i class="fas fa-users me-2" style="color: var(--esparza-blue);"></i>
                                Usuarios del Sistema
                            </h2>
                            <p class="text-muted mb-0">Administra los usuarios con acceso al sistema bibliotecario</p>
                        </div>
                        <button type="button" class="btn btn-usuarios-primary" data-bs-toggle="modal" data-bs-target="#modalAgregarUsuario">
                            <i class="fas fa-user-plus"></i>
                            Nuevo Usuario
                        </button>
                    </div>

                    <!-- Formulario de Búsqueda -->
                    <form asp-action="Index" method="get" class="search-filter-section mb-4" id="searchForm">
                        <div class="row g-3">
                            <!-- Búsqueda -->
                            <div class="col-12 col-xl-8">
                                <div class="search-container">
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-search text-muted"></i>
                                        </span>
                                        <input type="text" class="form-control" name="termino" id="searchInput"
                                               placeholder="Buscar por nombre o cédula..."
                                               value="@terminoBusqueda">
                                        <button class="btn btn-esparza-primary" type="submit" id="btnBuscar">
                                            <i class="fas fa-search me-1"></i>Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Campos ocultos para paginación -->
                        <input type="hidden" name="pagina" id="paginaHidden" value="@paginacion.PaginaActual" />
                        <input type="hidden" name="resultadosPorPagina" id="resultadosPorPaginaHidden" value="@paginacion.ResultadosPorPagina" />
                    </form>

                    <!-- Información de resultados -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="text-muted small">
                            @if (!string.IsNullOrEmpty(terminoBusqueda))
                            {
                                <span id="resultCount">@paginacion.TotalResultados</span>
                                <span>usuarios encontrados para "@terminoBusqueda"</span>
                            }
                            else
                            {
                                <span id="resultCount">@paginacion.TotalResultados</span>
                                <span>usuarios en el sistema</span>
                            }
                        </div>
                        <div class="d-flex gap-2">
                            @if (!string.IsNullOrEmpty(terminoBusqueda))
                            {
                                <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-times me-1"></i>Limpiar búsqueda
                                </a>
                            }
                        </div>
                    </div>

                    <!-- Alertas -->
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success-usuarios alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger-usuarios alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (ViewBag.Error != null)
                    {
                        <div class="alert alert-danger-usuarios alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @ViewBag.Error
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Tabla de Usuarios -->
                    @if (usuarios.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-usuarios">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Nombre</th>
                                        <th>Email</th>
                                        <th>Cédula</th>
                                        <th>Roles</th>
                                        <th>Estado</th>
                                        <th class="text-center">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var usuario in usuarios)
                                    {
                                        <tr class="zoom-in">
                                            <td class="fw-bold">#@usuario.IdUsuario</td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-user-circle me-2 text-muted"></i>
                                                    @usuario.Nombre
                                                </div>
                                            </td>
                                            <td>
                                                <i class="fas fa-envelope me-2 text-muted"></i>
                                                @usuario.Email
                                            </td>
                                            <td>
                                                <i class="fas fa-id-card me-2 text-muted"></i>
                                                @usuario.Cedula
                                            </td>
                                            <td>
                                                @if (usuario.Roles != null && usuario.Roles.Any())
                                                {
                                                    <div class="d-flex flex-wrap gap-1">
                                                        @foreach (var rolNombre in usuario.Roles)
                                                        {
                                                            <span class="text-muted small" data-rol="@rolNombre">
                                                                <i class="fas fa-user-tag me-1"></i>@rolNombre
                                                            </span>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted small">
                                                        <i class="fas fa-times-circle me-1"></i>Sin roles
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge @(usuario.Estado == "Activo" ? "badge-activo" : "badge-inactivo")">
                                                    <i class="fas @(usuario.Estado == "Activo" ? "fa-check" : "fa-times") me-1"></i>
                                                    @usuario.Estado
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-actions-group justify-content-center">
                                                    <!-- Botón Editar -->
                                                    <button type="button" class="btn btn-action btn-action-edit"
                                                            data-bs-toggle="modal" data-bs-target="#modalEditarUsuario"
                                                            data-id="@usuario.IdUsuario"
                                                            data-nombre="@usuario.Nombre"
                                                            data-email="@usuario.Email"
                                                            data-cedula="@usuario.Cedula"
                                                            data-estado="@usuario.Estado"
                                                            data-rol-id="@((usuario.RolesIds != null && usuario.RolesIds.Any()) ? usuario.RolesIds.First() : 0)"
                                                            title="Editar Usuario">
                                                        <i class="fas fa-user-edit icon-elegant"></i>
                                                    </button>

                                                    <!-- Botón Desactivar/Activar -->
                                                    @if (usuario.Estado == "Activo")
                                                    {
                                                        <button type="button" class="btn btn-action btn-action-deactivate"
                                                                data-bs-toggle="modal" data-bs-target="#modalDesactivarUsuario"
                                                                data-id="@usuario.IdUsuario"
                                                                data-nombre="@usuario.Nombre"
                                                                title="Desactivar Usuario">
                                                            <i class="fas fa-user-slash icon-elegant"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-action btn-action-activate"
                                                                data-bs-toggle="modal" data-bs-target="#modalActivarUsuario"
                                                                data-id="@usuario.IdUsuario"
                                                                data-nombre="@usuario.Nombre"
                                                                title="Activar Usuario">
                                                            <i class="fas fa-user-check icon-elegant"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Paginación -->
                        @if (paginacion.TotalPaginas > 1)
                        {
                            <nav aria-label="Paginación de resultados" class="mt-5">
                                <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                                    <!-- Información de página -->
                                    <div class="pagination-info">
                                        <small class="text-muted">
                                            Mostrando <strong>@usuarios.Count</strong> de 
                                            <strong>@paginacion.TotalResultados.ToString("N0")</strong> usuarios
                                            - Página <strong>@paginacion.PaginaActual</strong> de 
                                            <strong>@paginacion.TotalPaginas</strong>
                                        </small>
                                    </div>

                                    <!-- Controles de paginación -->
                                    <ul class="pagination justify-content-center mb-0">
                                        <!-- Botón Primera Página -->
                                        <li class="page-item @(paginacion.PaginaActual == 1 ? "disabled" : "")">
                                            @if (paginacion.PaginaActual > 1)
                                            {
                                                <button type="button" onclick="cambiarPagina(1)" class="page-link" title="Primera página">
                                                    <i class="fas fa-angle-double-left"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="page-link"><i class="fas fa-angle-double-left"></i></span>
                                            }
                                        </li>

                                        <!-- Botón Anterior -->
                                        <li class="page-item @(paginacion.PaginaActual == 1 ? "disabled" : "")">
                                            @if (paginacion.PaginaActual > 1)
                                            {
                                                <button type="button" onclick="cambiarPagina(@(paginacion.PaginaActual - 1))"
                                                        class="page-link" title="Página anterior">
                                                    <i class="fas fa-chevron-left"></i> Anterior
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="page-link"><i class="fas fa-chevron-left"></i> Anterior</span>
                                            }
                                        </li>

                                        <!-- Números de página -->
                                        @{
                                            int inicio = Math.Max(1, paginacion.PaginaActual - 2);
                                            int fin = Math.Min(paginacion.TotalPaginas, paginacion.PaginaActual + 2);
                                            
                                            if (inicio > 1)
                                            {
                                                <li class="page-item disabled">
                                                    <span class="page-link">...</span>
                                                </li>
                                            }
                                        }

                                        @for (int i = inicio; i <= fin; i++)
                                        {
                                            <li class="page-item @(i == paginacion.PaginaActual ? "active" : "")">
                                                <button type="button" onclick="cambiarPagina(@i)"
                                                        class="page-link @(i == paginacion.PaginaActual ? "fw-bold" : "")">
                                                    @i
                                                </button>
                                            </li>
                                        }

                                        @if (fin < paginacion.TotalPaginas)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }

                                        <!-- Botón Siguiente -->
                                        <li class="page-item @(paginacion.PaginaActual >= paginacion.TotalPaginas ? "disabled" : "")">
                                            @if (paginacion.PaginaActual < paginacion.TotalPaginas)
                                            {
                                                <button type="button" onclick="cambiarPagina(@(paginacion.PaginaActual + 1))"
                                                        class="page-link" title="Página siguiente">
                                                    Siguiente <i class="fas fa-chevron-right"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="page-link">Siguiente <i class="fas fa-chevron-right"></i></span>
                                            }
                                        </li>

                                        <!-- Botón Última Página -->
                                        <li class="page-item @(paginacion.PaginaActual >= paginacion.TotalPaginas ? "disabled" : "")">
                                            @if (paginacion.PaginaActual < paginacion.TotalPaginas)
                                            {
                                                <button type="button" onclick="cambiarPagina(@paginacion.TotalPaginas)" 
                                                        class="page-link" title="Última página">
                                                    <i class="fas fa-angle-double-right"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="page-link"><i class="fas fa-angle-double-right"></i></span>
                                            }
                                        </li>
                                    </ul>

                                    <!-- Selector de resultados por página -->
                                    <!-- Selector de resultados por página - CORREGIDO -->
                                    <div class="pagination-size">
                                        <small class="text-muted me-2">Mostrar:</small>
                                        <select class="form-select form-select-sm d-inline-block w-auto"
                                                onchange="cambiarResultadosPorPagina(this.value)">
                                            @{
                                                var resultadosPorPagina = paginacion.ResultadosPorPagina;
                                            }
                                            <option value="20" selected="@(resultadosPorPagina == 20)">20</option>
                                            <option value="50" selected="@(resultadosPorPagina == 50)">50</option>
                                            <option value="100" selected="@(resultadosPorPagina == 100)">100</option>
                                        </select>
                                    </div>
                                </div>
                            </nav>
                        }
                    }
                    else if (!string.IsNullOrEmpty(terminoBusqueda))
                    {
                        <div class="empty-state text-center py-5">
                            <i class="fas fa-search fa-4x text-muted mb-3"></i>
                            <h4>No se encontraron resultados</h4>
                            <p class="text-muted">No hay usuarios que coincidan con "@terminoBusqueda"</p>
                            <a href="@Url.Action("Index")" class="btn btn-esparza-primary mt-3">
                                <i class="fas fa-users me-2"></i>Ver todos los usuarios
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-users-slash"></i>
                            <h4>No hay usuarios registrados</h4>
                            <p class="text-muted">No se encontraron usuarios en el sistema. Comienza agregando el primer usuario.</p>
                            <button type="button" class="btn btn-usuarios-primary mt-3" data-bs-toggle="modal" data-bs-target="#modalAgregarUsuario">
                                <i class="fas fa-user-plus me-2"></i>Agregar Primer Usuario
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal Agregar Usuario -->
<div class="modal fade modal-usuarios" id="modalAgregarUsuario" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus me-2"></i>
                    Agregar Nuevo Usuario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="formAgregarUsuario" asp-action="CrearUsuario" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group-usuarios">
                                <label for="nombre" class="form-label-usuarios">
                                    <i class="fas fa-user"></i>Nombre Completo
                                </label>
                                <input type="text" class="form-control form-control-usuarios" id="nombre" name="nombre" required placeholder="Ingrese el nombre completo">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group-usuarios">
                                <label for="cedula" class="form-label-usuarios">
                                    <i class="fas fa-id-card"></i>Cédula
                                </label>
                                <input type="text" class="form-control form-control-usuarios" id="cedula" name="cedula" required placeholder="Ingrese la cédula">
                            </div>
                        </div>
                    </div>
                    <div class="form-group-usuarios">
                        <label for="email" class="form-label-usuarios">
                            <i class="fas fa-envelope"></i>Email
                        </label>
                        <input type="email" class="form-control form-control-usuarios" id="email" name="email" required placeholder="Ingrese el email">
                    </div>
                    <div class="form-group-usuarios">
                        <label for="password" class="form-label-usuarios">
                            <i class="fas fa-lock"></i>Contraseña
                        </label>
                        <input type="password" class="form-control form-control-usuarios" id="password" name="password" required placeholder="Ingrese la contraseña">
                    </div>

                    <!-- Dropdown de Rol -->
                    <div class="form-group-usuarios">
                        <label for="rolAgregar" class="form-label-usuarios">
                            <i class="fas fa-user-shield"></i> Asignar Rol
                        </label>
                        <select id="rolAgregar" name="idRol" class="form-control form-control-usuarios">
                            <option value="0">— Seleccione un rol —</option>
                            @if (ViewBag.Roles is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> rolesAgregar && rolesAgregar.Any())
                            {
                                foreach (var r in rolesAgregar)
                                {
                                    if (r.Value != "0") // Excluir la opción por defecto si existe
                                    {
                                        <option value="@r.Value">@r.Text</option>
                                    }
                                }
                            }
                            else
                            {
                                <option disabled>— No hay roles disponibles —</option>
                            }
                        </select>
                        <small class="text-muted">Opcional: si eliges un rol, se asignará después de crear el usuario.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-usuarios-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-usuarios-primary">
                        <i class="fas fa-save me-2"></i>Guardar Usuario
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Editar Usuario -->
<div class="modal fade modal-usuarios" id="modalEditarUsuario" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit me-2"></i>
                    Editar Usuario
                </h5>
                @* <button type="button" class="btn-close" data-bs-dismiss="modal"></button> *@
                <a asp-controller="Usuario"
                   asp-action="Index"
                   class="btn-close"
                   aria-label="Cerrar"></a>

            </div>

            <!-- Contenedor de alertas -->

            <div id="modalAlerts" class="px-4 pt-3"></div>

            <!-- Formulario de datos del usuario -->
            <form id="formEditarUsuario" asp-action="EditarUsuario" method="post" class="mb-2">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editarIdUsuario" name="idUsuario">
                <div class="modal-body pb-2">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group-usuarios">
                                <label for="editarNombre" class="form-label-usuarios">
                                    <i class="fas fa-user"></i>Nombre Completo
                                </label>
                                <input type="text" class="form-control form-control-usuarios" id="editarNombre" name="nombre" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group-usuarios">
                                <label for="editarCedula" class="form-label-usuarios">
                                    <i class="fas fa-id-card"></i>Cédula
                                </label>
                                <input type="text" class="form-control form-control-usuarios" id="editarCedula" name="cedula" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group-usuarios">
                        <label for="editarEmail" class="form-label-usuarios">
                            <i class="fas fa-envelope"></i>Email
                        </label>
                        <input type="email" class="form-control form-control-usuarios" id="editarEmail" name="email" required>
                    </div>
                    <div class="form-group-usuarios">
                        <label for="editarPassword" class="form-label-usuarios">
                            <i class="fas fa-lock"></i>Contraseña
                        </label>
                        <input type="password" class="form-control form-control-usuarios" id="editarPassword" name="password" placeholder="Dejar vacío para no cambiar">
                        <small class="form-text text-muted">Solo complete si desea cambiar la contraseña</small>
                    </div>
                    <div class="form-group-usuarios">
                        <label for="editarEstado" class="form-label-usuarios">
                            <i class="fas fa-toggle-on"></i>Estado
                        </label>
                        <select class="form-control form-control-usuarios" id="editarEstado" name="estado" required>
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer pt-0">
                    <button type="button" class="btn btn-usuarios-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-usuarios-primary">
                        <i class="fas fa-save me-2"></i>Actualizar Usuario
                    </button>
                </div>
            </form>

            <!-- Gestión de roles -->
            <div class="border-top px-4 pt-3 pb-4">
                <h6 class="mb-3"><i class="fas fa-user-shield me-2"></i>Gestión de Roles</h6>

                <div class="row g-2 align-items-end">
                    <div class="col-md-8">
                        <label for="rolEditar" class="form-label-usuarios">
                            Seleccionar Rol
                        </label>
                        <select id="rolEditar" class="form-control form-control-usuarios">
                            <option value="">— Seleccione un rol —</option>
                            @if (ViewBag.Roles is IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> rolesEditar && rolesEditar.Any())
                            {
                                foreach (var r in rolesEditar)
                                {
                                    if (r.Value != "0") // Excluir opción por defecto
                                    {
                                        <option value="@r.Value">@r.Text</option>
                                    }
                                }
                            }
                            else
                            {
                                <option disabled>— No hay roles disponibles —</option>
                            }
                        </select>
                        <small class="text-muted">Selecciona un rol para asignarlo o quitarlo del usuario.</small>
                    </div>
                    <div class="col-md-4 d-flex gap-2">
                        <!-- Form Asignar Rol -->
                        <form asp-action="AsignarRol" method="post" class="d-inline flex-fill" id="formAsignarRol">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="IdUsuario" id="asignarIdUsuario" />
                            <input type="hidden" name="IdRol" id="asignarIdRol" />
                            <button type="submit" class="btn btn-outline-primary w-100" id="btnAsignarRol">
                                <i class="fas fa-plus-circle me-2"></i>Asignar
                            </button>
                        </form>

                        <!-- Form Quitar Rol -->
                        <form asp-action="QuitarRol" method="post" class="d-inline flex-fill" id="formQuitarRol">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="IdUsuario" id="quitarIdUsuario" />
                            <input type="hidden" name="IdRol" id="quitarIdRol" />
                            <button type="submit" class="btn btn-outline-danger w-100" id="btnQuitarRol">
                                <i class="fas fa-minus-circle me-2"></i>Quitar
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Desactivar Usuario -->
<div class="modal fade modal-usuarios" id="modalDesactivarUsuario" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-slash me-2"></i>
                    Desactivar Usuario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="formDesactivarUsuario" asp-action="DesactivarUsuario" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="desactivarIdUsuario" name="id">
                <div class="modal-body text-center">
                    <div class="mb-4">
                        <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                        <h5>¿Desactivar Usuario?</h5>
                    </div>
                    <p>Está a punto de desactivar al usuario:</p>
                    <h6 class="text-danger mb-3" id="nombreUsuarioDesactivar"></h6>
                    <p class="text-muted small">
                        <i class="fas fa-info-circle me-1"></i>
                        El usuario no podrá acceder al sistema hasta que sea activado nuevamente.
                    </p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-usuarios-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-action-deactivate">
                        <i class="fas fa-user-slash me-2"></i>Desactivar
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Activar Usuario -->
<div class="modal fade modal-usuarios" id="modalActivarUsuario" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-check me-2"></i>
                    Activar Usuario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="formActivarUsuario" asp-action="ActivarUsuario" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="activarIdUsuario" name="id">
                <div class="modal-body text-center">
                    <div class="mb-4">
                        <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                        <h5>¿Activar Usuario?</h5>
                    </div>
                    <p>Está a punto de activar al usuario:</p>
                    <h6 class="text-success mb-3" id="nombreUsuarioActivar"></h6>
                    <p class="text-muted small">
                        <i class="fas fa-info-circle me-1"></i>
                        El usuario podrá acceder al sistema nuevamente.
                    </p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-usuarios-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-action-activate">
                        <i class="fas fa-user-check me-2"></i>Activar
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // Script para manejar búsqueda, paginación y modales
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM cargado - inicializando funcionalidades');

            // =============================================
            // FUNCIONALIDAD DE BÚSQUEDA Y PAGINACIÓN
            // =============================================
            const searchInput = document.getElementById('searchInput');
            const btnBuscar = document.getElementById('btnBuscar');
            const paginaHidden = document.getElementById('paginaHidden');
            const searchForm = document.getElementById('searchForm');
            const resultCount = document.getElementById('resultCount');

            // Función para cambiar página
            window.cambiarPagina = function(pagina) {
                console.log('Cambiando a página:', pagina);
                if (paginaHidden && searchForm) {
                    paginaHidden.value = pagina;
                    searchForm.submit();
                }
            }

            // Función para cambiar resultados por página
            window.cambiarResultadosPorPagina = function(resultados) {
                console.log('Cambiando resultados por página:', resultados);
                const form = document.getElementById('searchForm');
                if (form) {
                    let resultadosInput = document.getElementById('resultadosPorPaginaHidden');
                    if (!resultadosInput) {
                        resultadosInput = document.createElement('input');
                        resultadosInput.type = 'hidden';
                        resultadosInput.name = 'resultadosPorPagina';
                        resultadosInput.id = 'resultadosPorPaginaHidden';
                        form.appendChild(resultadosInput);
                    }
                    resultadosInput.value = resultados;

                    if (paginaHidden) {
                        paginaHidden.value = 1;
                    }
                    form.submit();
                }
            }

            // Búsqueda rápida con Enter
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        realizarBusqueda();
                    }
                });
            }

            // Función para realizar búsqueda
            function realizarBusqueda() {
                if (paginaHidden) {
                    paginaHidden.value = 1;
                }
                if (searchForm) {
                    searchForm.submit();
                }
            }

            // Event listener para el botón de búsqueda
            if (btnBuscar) {
                btnBuscar.addEventListener('click', function(e) {
                    e.preventDefault();
                    realizarBusqueda();
                });
            }

            // =============================================
            // FUNCIONALIDAD DEL MODAL AGREGAR USUARIO
            // =============================================
            const formAgregarUsuario = document.getElementById('formAgregarUsuario');
            const modalAgregarUsuario = document.getElementById('modalAgregarUsuario');

            if (formAgregarUsuario) {
                formAgregarUsuario.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const submitBtn = this.querySelector('button[type="submit"]');
                    const originalText = submitBtn.innerHTML;

                    // Mostrar estado de carga
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creando...';

                    try {
                        const formData = new FormData(this);

                        const response = await fetch('@Url.Action("CrearUsuario")', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const resultado = await response.json();

                        if (resultado.success) {
                            // Cerrar el modal de agregar usuario
                            const modalInstance = bootstrap.Modal.getInstance(modalAgregarUsuario);
                            modalInstance.hide();

                            // Limpiar el formulario
                            formAgregarUsuario.reset();

                            // Mostrar mensaje de éxito en el modal global
                                    if (resultado.type === 'success') {
            showSuccess(resultado.message);
        } else if (resultado.type === 'warning') {
            showWarning(resultado.message);
        } else {
            // 🔹 Mostrar éxito por defecto si no se define un tipo
            showSuccess(resultado.message || 'Usuario creado correctamente.');
        }

                            // Recargar la página después de 2 segundos para mostrar el nuevo usuario
                            setTimeout(() => {
                                window.location.reload();
                            }, 2000);

                        } else {
                            // Mostrar error en el modal global sin cerrar el modal de agregar
                            showError(resultado.message);

                            // Restaurar botón
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = originalText;
                        }
                    } catch (error) {
                        // Mostrar error de conexión
                        showError('Error de conexión: ' + error.message);

                        // Restaurar botón
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalText;
                    }
                });
            }

            // Limpiar formulario cuando se cierre el modal
            if (modalAgregarUsuario) {
                modalAgregarUsuario.addEventListener('hidden.bs.modal', function() {
                    if (formAgregarUsuario) {
                        formAgregarUsuario.reset();
                    }
                });
            }

            // =============================================
            // FUNCIONALIDAD DEL MODAL EDITAR USUARIO (MODIFICADO PARA MODAL GLOBAL)
            // =============================================
            const formEditarUsuario = document.getElementById('formEditarUsuario');
            const modalEditarUsuario = document.getElementById('modalEditarUsuario');

            if (formEditarUsuario) {
                formEditarUsuario.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    console.log('Formulario editar enviado - iniciando AJAX');

                    const submitBtn = this.querySelector('button[type="submit"]');
                    const originalText = submitBtn.innerHTML;

                    // Mostrar estado de carga
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Actualizando...';

                    try {
                        const formData = new FormData(this);
                        console.log('Datos del formulario editar:', Object.fromEntries(formData));

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                        // const response = await fetch('@Url.Action("EditarUsuario")', {
                        //     method: 'POST',
                        //     body: formData,
                        //     headers: {
                        //         'RequestVerificationToken': token
                        //     }
                        // });
                                const response = await fetch('@Url.Action("EditarUsuario")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token,
                'X-Requested-With': 'XMLHttpRequest' // 👈 Importante para que el backend devuelva JSON
            }
        });


                        console.log('Respuesta editar recibida, status:', response.status);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const resultado = await response.json();
                        console.log('Resultado editar JSON:', resultado);

                        if (resultado.success) {
                            console.log('✅ Edición exitosa');

                            // Cerrar el modal de editar usuario
                            if (modalEditarUsuario) {
                                const modalInstance = bootstrap.Modal.getInstance(modalEditarUsuario);
                                if (modalInstance) {
                                    modalInstance.hide();
                                    console.log('Modal editar cerrado');
                                }
                            }

                            // Mostrar mensaje de éxito en el modal global
                            showSuccess(resultado.message);

                            // Recargar la página después de 2 segundos
                            setTimeout(() => {
                                console.log('Recargando página...');
                                window.location.reload();
                            }, 2000);

                        } else {
                            console.log('❌ Error en edición');
                            // Mostrar error en el MODAL GLOBAL
                            showError(resultado.message);

                            // Restaurar botón
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = originalText;
                        }
                    } catch (error) {
                        console.error('Error en fetch editar:', error);
                        // Mostrar error de conexión en el MODAL GLOBAL
                        showError('Error de conexión: ' + error.message);

                        // Restaurar botón
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalText;
                    }
                });
            } else {
                console.error('❌ Formulario editar usuario NO encontrado');
            }

            // =============================================
            // FUNCIONALIDAD DE MODALES EXISTENTES
            // =============================================

            // Función para mostrar alertas en el modal (se mantiene para compatibilidad)
            function showModalAlert(message, type = 'success') {
                const alertClass = type === 'success' ? 'alert-success-usuarios' : 'alert-danger-usuarios';
                const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';

                const alertHtml = `
                    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                        <i class="fas ${iconClass} me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

                const modalAlerts = document.getElementById('modalAlerts');
                if (modalAlerts) {
                    modalAlerts.innerHTML = alertHtml;

                    setTimeout(() => {
                        const alertElement = modalAlerts.querySelector('.alert');
                        if (alertElement) {
                            const bsAlert = new bootstrap.Alert(alertElement);
                            bsAlert.close();
                        }
                    }, 5000);
                }
            }

            // Modal Editar Usuario - Configuración de datos
            const modalEditar = document.getElementById('modalEditarUsuario');
            if (modalEditar) {
                modalEditar.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const id = button.getAttribute('data-id');
                    const nombre = button.getAttribute('data-nombre');
                    const email = button.getAttribute('data-email');
                    const cedula = button.getAttribute('data-cedula');
                    const estado = button.getAttribute('data-estado');
                    const rolId = button.getAttribute('data-rol-id');

                    // Limpiar alertas al abrir el modal
                    const modalAlerts = document.getElementById('modalAlerts');
                    if (modalAlerts) {
                        modalAlerts.innerHTML = '';
                    }

                    // Datos básicos del usuario
                    document.getElementById('editarIdUsuario').value = id;
                    document.getElementById('editarNombre').value = nombre;
                    document.getElementById('editarEmail').value = email;
                    document.getElementById('editarCedula').value = cedula;
                    document.getElementById('editarEstado').value = estado;

                    // Gestión de roles
                    const selectRolEditar = document.getElementById('rolEditar');
                    if (selectRolEditar && rolId && rolId !== '0') {
                        selectRolEditar.value = rolId;
                    } else if (selectRolEditar) {
                        selectRolEditar.value = '';
                    }

                    // Sincronizar IDs para los forms de roles
                    document.getElementById('asignarIdUsuario').value = id;
                    document.getElementById('quitarIdUsuario').value = id;
                });
            }

            // Validación para forms de roles
            function validarRolSeleccionado() {
                const rolSelect = document.getElementById('rolEditar');
                const rolValue = rolSelect.value;

                if (!rolValue) {
                    // Usar modal global para mostrar error de validación
                    showError('Por favor seleccione un rol antes de continuar');
                    return false;
                }
                return true;
            }

            // Sincronizar inputs antes de enviar forms de roles
            function syncRolInputs() {
                if (!validarRolSeleccionado()) {
                    return false;
                }

                const userId = document.getElementById('editarIdUsuario').value;
                const rolSelect = document.getElementById('rolEditar');
                const rolValue = rolSelect.value;

                document.getElementById('asignarIdUsuario').value = userId;
                document.getElementById('quitarIdUsuario').value = userId;
                document.getElementById('asignarIdRol').value = rolValue;
                document.getElementById('quitarIdRol').value = rolValue;

                return true;
            }

            // Función para enviar datos como objeto DTO (MODIFICADA PARA USAR MODAL GLOBAL)
            async function enviarRolAccion(action, userId, rolId) {
                try {
                    const dto = {
                        IdUsuario: parseInt(userId),
                        IdRol: parseInt(rolId)
                    };

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    const response = await fetch(action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(dto)
                    });

                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const result = await response.json();

                        if (result.success) {
                            // Usar modal global para éxito
                            showSuccess(result.message);

                            // Recargar después de éxito
                            setTimeout(() => {
                                window.location.reload();
                            }, 2000);
                        } else {
                            // Usar modal global para error
                            showError(result.message);
                        }
                    } else {
                        console.warn('Respuesta no es JSON, recargando página...');
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('Error en la solicitud:', error);
                    // Usar modal global para error de conexión
                    showError('Error de conexión al procesar la solicitud');
                }
            }

            // Manejar envío de formularios de roles
            document.getElementById('btnAsignarRol')?.addEventListener('click', async function(e) {
                e.preventDefault();

                if (!syncRolInputs()) {
                    return;
                }

                const userId = document.getElementById('asignarIdUsuario').value;
                const rolId = document.getElementById('asignarIdRol').value;
                const action = document.getElementById('formAsignarRol').getAttribute('action');

                await enviarRolAccion(action, userId, rolId);
            });

            document.getElementById('btnQuitarRol')?.addEventListener('click', async function(e) {
                e.preventDefault();

                if (!syncRolInputs()) {
                    return;
                }

                const userId = document.getElementById('quitarIdUsuario').value;
                const rolId = document.getElementById('quitarIdRol').value;
                const action = document.getElementById('formQuitarRol').getAttribute('action');

                await enviarRolAccion(action, userId, rolId);
            });

            // Modal Desactivar Usuario
        const modalDesactivar = document.getElementById('modalDesactivarUsuario');
        if (!modalDesactivar) return;

        // Abrir modal
        modalDesactivar.addEventListener('show.bs.modal', e => {
            const { id, nombre } = e.relatedTarget.dataset;
            document.getElementById('desactivarIdUsuario').value = id;
            document.getElementById('nombreUsuarioDesactivar').textContent = nombre;
        });

        // Envío del formulario
        document.getElementById('formDesactivarUsuario').addEventListener('submit', async e => {
            e.preventDefault();

            const form = e.target;
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalHtml = submitBtn.innerHTML;

            // Loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando...';
            submitBtn.disabled = true;

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const data = await response.json();

                bootstrap.Modal.getInstance(modalDesactivar).hide();

                data.success ? showSuccess(data.message) : showError(data.message);

                if (data.success) setTimeout(() => window.location.reload(), 2000);

            } catch (error) {
                showError('Error de conexión al procesar la solicitud');
            } finally {
                submitBtn.innerHTML = originalHtml;
                submitBtn.disabled = false;
            }
        });

            //Modal modalActivar usuario
                    // Modal Activar Usuario
        const modalActivar = document.getElementById('modalActivarUsuario');
        if (!modalActivar) return;

        // Abrir modal
        modalActivar.addEventListener('show.bs.modal', e => {
            const { id, nombre } = e.relatedTarget.dataset;
            document.getElementById('activarIdUsuario').value = id;
            document.getElementById('nombreUsuarioActivar').textContent = nombre; // Corregí el ID
        });

        // Envío del formulario
        document.getElementById('formActivarUsuario').addEventListener('submit', async e => {
            e.preventDefault();

            const form = e.target;
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalHtml = submitBtn.innerHTML;

            // Loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando...';
            submitBtn.disabled = true;

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const data = await response.json();

                bootstrap.Modal.getInstance(modalActivar).hide();

                data.success ? showSuccess(data.message) : showError(data.message);

                if (data.success) setTimeout(() => window.location.reload(), 2000);

            } catch (error) {
                showError('Error de conexión al procesar la solicitud');
            } finally {
                submitBtn.innerHTML = originalHtml;
                submitBtn.disabled = false;
            }
        });


                // =============================================
                // MANEJO DE MENSAJES DEL CONTROLADOR PARA MODAL GLOBAL
                // =============================================

                // Mostrar mensajes del ViewData cuando se carga la página
                @if (ViewData["ModalSuccess"] != null)
                {
                        <text>
                        console.log('Mostrando mensaje de éxito desde ViewData');
                        showSuccess('@Html.Raw(ViewData["ModalSuccess"])');
                        </text>
                }

                @if (ViewData["ModalError"] != null)
                {
                        var errorMessage = ViewData["ModalError"].ToString();
                        var detailMessage = ViewData["ModalDetail"]?.ToString();

                        if (!string.IsNullOrEmpty(detailMessage))
                        {
                                errorMessage += "\\n\\nDetalle: " + detailMessage;
                        }

                        <text>
                        console.log('Mostrando mensaje de error desde ViewData');
                        showError('@Html.Raw(errorMessage)');
                        </text>
                }

                // Mostrar mensajes del TempData (para compatibilidad con redirecciones)
                @if (TempData["ToastType"] != null)
                {
                        <text>
                        $(document).ready(function() {
                            setTimeout(function() {
                                const message = '@Html.Raw(TempData["ToastMessage"])';
                                const type = '@TempData["ToastType"]';

                                if (type === 'success') {
                                    showSuccess(message);
                                } else if (type === 'error') {
                                    showError(message);
                                } else if (type === 'warning') {
                                    showWarning(message);
                                }
                            }, 300);
                        });
                        </text>
                }

            console.log('Todas las funcionalidades inicializadas correctamente');
        });
    </script>
}